{
  "address": "0x0C685827eFe3551291Fb7De853BfDb02C3eDF3a3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "instance",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "NewStaking",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "existsInstance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getInstance",
      "outputs": [
        {
          "internalType": "contract Staking",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getOrCreateInstance",
      "outputs": [
        {
          "internalType": "contract Staking",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf9b7bf46bdeb1ba01cb8da949f7b0b1e76b3895e14c9af187b03f3a7bd46c921",
  "receipt": {
    "to": null,
    "from": "0x5CfAdf589a694723F9Ed167D647582B3Db3b33b3",
    "contractAddress": "0x0C685827eFe3551291Fb7De853BfDb02C3eDF3a3",
    "transactionIndex": 11,
    "gasUsed": "2743288",
    "logsBloom": "0x
    "blockHash": "0xeaa3b6d598640b28e39ecb624318d5f1904cea3b41d912166277fa8c97c3c6ce",
    "transactionHash": "0xf9b7bf46bdeb1ba01cb8da949f7b0b1e76b3895e14c9af187b03f3a7bd46c921",
    "logs": [],
    "blockNumber": 8510355,
    "cumulativeGasUsed": "6901587",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fa446f7741ee61703911aff3f31a5e42",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"NewStaking\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"existsInstance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getInstance\",\"outputs\":[{\"internalType\":\"contract Staking\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getOrCreateInstance\",\"outputs\":[{\"internalType\":\"contract Staking\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/StakingFactory.sol\":\"StakingFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/Staking.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport \\\"./lib/Checkpointing.sol\\\";\\nimport \\\"./lib/os/IsContract.sol\\\";\\nimport \\\"./lib/os/SafeMath.sol\\\";\\nimport \\\"./lib/os/SafeERC20.sol\\\";\\nimport \\\"./lib/os/TimeHelpers.sol\\\";\\n\\nimport \\\"./locking/ILockable.sol\\\";\\nimport \\\"./locking/ILockManager.sol\\\";\\n\\nimport \\\"./standards/IERC900.sol\\\";\\nimport \\\"./standards/IERC900History.sol\\\";\\nimport \\\"./standards/IApproveAndCallFallBack.sol\\\";\\n\\n\\ncontract Staking is IERC900, IERC900History, ILockable, IApproveAndCallFallBack, IsContract, TimeHelpers {\\n    using Checkpointing for Checkpointing.History;\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    uint256 private constant MAX_UINT64 = uint256(uint64(-1));\\n\\n    string private constant ERROR_TOKEN_NOT_CONTRACT = \\\"STAKING_TOKEN_NOT_CONTRACT\\\";\\n    string private constant ERROR_AMOUNT_ZERO = \\\"STAKING_AMOUNT_ZERO\\\";\\n    string private constant ERROR_TOKEN_TRANSFER = \\\"STAKING_TOKEN_TRANSFER_FAIL\\\";\\n    string private constant ERROR_TOKEN_DEPOSIT = \\\"STAKING_TOKEN_DEPOSIT_FAIL\\\";\\n    string private constant ERROR_WRONG_TOKEN = \\\"STAKING_WRONG_TOKEN\\\";\\n    string private constant ERROR_NOT_ENOUGH_BALANCE = \\\"STAKING_NOT_ENOUGH_BALANCE\\\";\\n    string private constant ERROR_NOT_ENOUGH_ALLOWANCE = \\\"STAKING_NOT_ENOUGH_ALLOWANCE\\\";\\n    string private constant ERROR_ALLOWANCE_ZERO = \\\"STAKING_ALLOWANCE_ZERO\\\";\\n    string private constant ERROR_LOCK_ALREADY_EXISTS = \\\"STAKING_LOCK_ALREADY_EXISTS\\\";\\n    string private constant ERROR_LOCK_DOES_NOT_EXIST = \\\"STAKING_LOCK_DOES_NOT_EXIST\\\";\\n    string private constant ERROR_NOT_ENOUGH_LOCK = \\\"STAKING_NOT_ENOUGH_LOCK\\\";\\n    string private constant ERROR_CANNOT_UNLOCK = \\\"STAKING_CANNOT_UNLOCK\\\";\\n    string private constant ERROR_CANNOT_CHANGE_ALLOWANCE = \\\"STAKING_CANNOT_CHANGE_ALLOWANCE\\\";\\n    string private constant ERROR_BLOCKNUMBER_TOO_BIG = \\\"STAKING_BLOCKNUMBER_TOO_BIG\\\";\\n\\n    event StakeTransferred(address indexed from, address indexed to, uint256 amount);\\n\\n    struct Lock {\\n        uint256 amount;\\n        uint256 allowance; // A lock is considered active when its allowance is greater than zero, and the allowance is always greater than or equal to amount\\n    }\\n\\n    struct Account {\\n        mapping (address => Lock) locks; // Mapping of lock manager => lock info\\n        uint256 totalLocked;\\n        Checkpointing.History stakedHistory;\\n    }\\n\\n    IERC20 public token;\\n    mapping (address => Account) internal accounts;\\n    Checkpointing.History internal totalStakedHistory;\\n\\n    /**\\n     * @notice Initialize Staking app with token `_token`\\n     * @param _token ERC20 token used for staking\\n     */\\n    constructor(IERC20 _token) public {\\n        require(isContract(address(_token)), ERROR_TOKEN_NOT_CONTRACT);\\n        token = _token;\\n    }\\n\\n    /**\\n     * @notice Stake `@tokenAmount(self.token(): address, _amount)`\\n     * @dev Callable only by a user\\n     * @param _amount Amount of tokens to be staked\\n     * @param _data Optional data emitted with the Staked event, to add signalling information in more complex staking applications\\n     */\\n    function stake(uint256 _amount, bytes calldata _data) external {\\n        _stakeFor(msg.sender, msg.sender, _amount, _data);\\n    }\\n\\n    /**\\n     * @notice Stake `@tokenAmount(self.token(): address, _amount)` for `_user`\\n     * @dev Callable only by a user\\n     * @param _user Address to stake tokens to\\n     * @param _amount Amount of tokens to be staked\\n     * @param _data Optional data emitted with the Staked event, to add signalling information in more complex staking applications\\n     */\\n    function stakeFor(address _user, uint256 _amount, bytes calldata _data) external {\\n        _stakeFor(msg.sender, _user, _amount, _data);\\n    }\\n\\n    /**\\n     * @notice Unstake `@tokenAmount(self.token(): address, _amount)`\\n     * @dev Callable only by a user\\n     * @param _amount Amount of tokens to be unstaked\\n     * @param _data Optional data emitted with the Unstaked event, to add signalling information in more complex staking applications\\n     */\\n    function unstake(uint256 _amount, bytes calldata _data) external {\\n        // _unstake() expects the caller to do this check\\n        require(_amount > 0, ERROR_AMOUNT_ZERO);\\n\\n        _unstake(msg.sender, _amount, _data);\\n    }\\n\\n    /**\\n     * @notice Allow `_lockManager` to lock up to `@tokenAmount(self.token(): address, _allowance)` of your staked balance\\n     * @dev Callable only by a user.\\n     *      This creates a new lock, so this manager cannot have an existing lock in place for the caller.\\n     * @param _lockManager Lock manager\\n     * @param _allowance Amount of tokens the manager will be allowed to lock\\n     * @param _data Optional, arbitrary data to be submitted to the manager\\n     */\\n    function allowManager(address _lockManager, uint256 _allowance, bytes calldata _data) external {\\n        _allowManager(_lockManager, _allowance, _data);\\n    }\\n\\n    /**\\n     * @notice Increase allowance of lock manager `_lockManager` by `@tokenAmount(self.token(): address, _allowance)`\\n     * @dev Callable only by a user\\n     * @param _lockManager Lock manager\\n     * @param _allowance Amount to increase allowance by\\n     */\\n    function increaseLockAllowance(address _lockManager, uint256 _allowance) external {\\n        Lock storage lock_ = accounts[msg.sender].locks[_lockManager];\\n        require(lock_.allowance > 0, ERROR_LOCK_DOES_NOT_EXIST);\\n\\n        _increaseLockAllowance(_lockManager, lock_, _allowance);\\n    }\\n\\n    /**\\n     * @notice Decrease allowance of lock manager `_lockManager` by `@tokenAmount(self.token(): address, _allowance)`\\n     * @dev Callable only by the user or lock manager.\\n     *      Cannot completely remove the allowance to the lock manager (and deactivate the lock).\\n     * @param _user Owner of the locked tokens\\n     * @param _lockManager Lock manager\\n     * @param _allowance Amount to decrease allowance by\\n     */\\n    function decreaseLockAllowance(address _user, address _lockManager, uint256 _allowance) external {\\n        require(msg.sender == _user || msg.sender == _lockManager, ERROR_CANNOT_CHANGE_ALLOWANCE);\\n        require(_allowance > 0, ERROR_AMOUNT_ZERO);\\n\\n        Lock storage lock_ = accounts[_user].locks[_lockManager];\\n        uint256 newAllowance = lock_.allowance.sub(_allowance);\\n        require(newAllowance >= lock_.amount, ERROR_NOT_ENOUGH_ALLOWANCE);\\n        // unlockAndRemoveManager() must be used for this:\\n        require(newAllowance > 0, ERROR_ALLOWANCE_ZERO);\\n\\n        lock_.allowance = newAllowance;\\n\\n        emit LockAllowanceChanged(_user, _lockManager, newAllowance);\\n    }\\n\\n    /**\\n     * @notice Lock `@tokenAmount(self.token(): address, _amount)` to lock manager `msg.sender`\\n     * @dev Callable only by an allowed lock manager\\n     * @param _user Owner of the locked tokens\\n     * @param _amount Amount of tokens to lock\\n     */\\n    function lock(address _user, uint256 _amount) external {\\n        require(_amount > 0, ERROR_AMOUNT_ZERO);\\n\\n        // check enough unlocked tokens are available\\n        require(_amount <= _unlockedBalanceOf(_user), ERROR_NOT_ENOUGH_BALANCE);\\n\\n        Account storage account = accounts[_user];\\n        Lock storage lock_ = account.locks[msg.sender];\\n\\n        uint256 newAmount = lock_.amount.add(_amount);\\n        // check allowance is enough, it also means that lock exists, as newAmount is greater than zero\\n        require(newAmount <= lock_.allowance, ERROR_NOT_ENOUGH_ALLOWANCE);\\n\\n        lock_.amount = newAmount;\\n\\n        // update total\\n        account.totalLocked = account.totalLocked.add(_amount);\\n\\n        emit LockAmountChanged(_user, msg.sender, newAmount);\\n    }\\n\\n    /**\\n     * @notice Unlock `@tokenAmount(self.token(): address, _amount)` from lock manager `_lockManager`\\n     * @dev Callable only by the user or lock manager. If called by the user, checks with the lock manager whether the request should be allowed.\\n     * @param _user Owner of the locked tokens\\n     * @param _lockManager Lock manager\\n     * @param _amount Amount of tokens to unlock\\n     */\\n    function unlock(address _user, address _lockManager, uint256 _amount) external {\\n        // _unlockUnsafe() expects the caller to do this check\\n        require(_amount > 0, ERROR_AMOUNT_ZERO);\\n\\n        require(_canUnlockUnsafe(msg.sender, _user, _lockManager, _amount), ERROR_CANNOT_UNLOCK);\\n\\n        _unlockUnsafe(_user, _lockManager, _amount);\\n    }\\n\\n    /**\\n     * @notice Unlock all tokens from lock manager `_lockManager` and remove them as a manager\\n     * @dev Callable only by the user or lock manager. If called by the user, checks with the lock manager whether the request should be allowed.\\n     * @param _user Owner of the locked tokens\\n     * @param _lockManager Lock manager\\n     */\\n    function unlockAndRemoveManager(address _user, address _lockManager) external {\\n        require(_canUnlockUnsafe(msg.sender, _user, _lockManager, 0), ERROR_CANNOT_UNLOCK);\\n\\n        Account storage account = accounts[_user];\\n        Lock storage lock_ = account.locks[_lockManager];\\n\\n        uint256 amount = lock_.amount;\\n        // update total\\n        account.totalLocked = account.totalLocked.sub(amount);\\n\\n        emit LockAmountChanged(_user, _lockManager, 0);\\n        emit LockManagerRemoved(_user, _lockManager);\\n\\n        delete account.locks[_lockManager];\\n    }\\n\\n    /**\\n     * @notice Slash `@tokenAmount(self.token(): address, _amount)` from `_from`'s locked balance to `_to`'s staked balance\\n     * @dev Callable only by a lock manager\\n     * @param _from Owner of the locked tokens\\n     * @param _to Recipient\\n     * @param _amount Amount of tokens to be transferred via slashing\\n     */\\n    function slash(address _from, address _to, uint256 _amount) external {\\n        _unlockUnsafe(_from, msg.sender, _amount);\\n        _transfer(_from, _to, _amount);\\n    }\\n\\n    /**\\n     * @notice Slash `@tokenAmount(self.token(): address, _amount)` from `_from`'s locked balance  directly to `_to`'s balance\\n     * @dev Callable only by a lock manager\\n     * @param _from Owner of the locked tokens\\n     * @param _to Recipient\\n     * @param _amount Amount of tokens to be transferred via slashing\\n     */\\n    function slashAndUnstake(address _from, address _to, uint256 _amount) external {\\n        _unlockUnsafe(_from, msg.sender, _amount);\\n        _transferAndUnstake(_from, _to, _amount);\\n    }\\n\\n    /**\\n     * @notice Slash `@tokenAmount(self.token(): address, _slashAmount)` from `_from`'s locked balance to `_to`'s staked balance, and leave an additional `@tokenAmount(self.token(): address, _unlockAmount)` unlocked for `_from`\\n     * @dev Callable only by a lock manager\\n     * @param _from Owner of the locked tokens\\n     * @param _to Recipient\\n     * @param _unlockAmount Amount of tokens to be left unlocked\\n     * @param _slashAmount Amount of tokens to be transferred via slashing\\n     */\\n    function slashAndUnlock(\\n        address _from,\\n        address _to,\\n        uint256 _unlockAmount,\\n        uint256 _slashAmount\\n    )\\n        external\\n    {\\n        _unlockUnsafe(_from, msg.sender, _unlockAmount.add(_slashAmount));\\n        _transfer(_from, _to, _slashAmount);\\n    }\\n\\n    /**\\n     * @notice Transfer `@tokenAmount(self.token(): address, _amount)` to `_to`\\u2019s staked balance\\n     * @dev Callable only by a user\\n     * @param _to Recipient\\n     * @param _amount Amount of tokens to be transferred\\n     */\\n    function transfer(address _to, uint256 _amount) external {\\n        _transfer(msg.sender, _to, _amount);\\n    }\\n\\n    /**\\n     * @notice Transfer `@tokenAmount(self.token(): address, _amount)` directly to `_to`\\u2019s balance\\n     * @dev Callable only by a user\\n     * @param _to Recipient\\n     * @param _amount Amount of tokens to be transferred\\n     */\\n    function transferAndUnstake(address _to, uint256 _amount) external {\\n        _transferAndUnstake(msg.sender, _to, _amount);\\n    }\\n\\n    /**\\n    /**\\n     * @dev ApproveAndCallFallBack compliance.\\n     *      Stakes the approved tokens for the user, allowing users to stake their tokens in a single transaction.\\n     *      Callable only by the staking token.\\n     * @param _from Account approving tokens\\n     * @param _amount Amount of tokens being approved\\n     * @param _token Token being approved, should be the caller\\n     * @param _data Optional data emitted with the Staked event, to add signalling information in more complex staking applications\\n     */\\n    function receiveApproval(address _from, uint256 _amount, address _token, bytes calldata _data) external {\\n        require(_token == msg.sender && _token == address(token), ERROR_WRONG_TOKEN);\\n\\n        _stakeFor(_from, _from, _amount, _data);\\n    }\\n\\n    /**\\n     * @dev Tell whether the history methods are supported\\n     * @return Always true\\n     */\\n    function supportsHistory() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Tell the last time `_user` modified their staked balance\\n     * @param _user Address\\n     * @return Last block number the account's staked balance was modified. 0 if it has never been modified.\\n     */\\n    function lastStakedFor(address _user) external view returns (uint256) {\\n        return accounts[_user].stakedHistory.lastUpdate();\\n    }\\n\\n    /**\\n     * @dev Tell the current locked balance for `_user`\\n     * @param _user Address\\n     * @return Amount of locked tokens owned by the requested account across all locks\\n     */\\n    function lockedBalanceOf(address _user) external view returns (uint256) {\\n        return _lockedBalanceOf(_user);\\n    }\\n\\n    /**\\n     * @dev Tell details of `_user`'s lock managed by `_lockManager`\\n     * @param _user Address\\n     * @param _lockManager Lock manager\\n     * @return Amount of locked tokens\\n     * @return Amount of tokens that lock manager is allowed to lock\\n     */\\n    function getLock(address _user, address _lockManager)\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 allowance\\n        )\\n    {\\n        Lock storage lock_ = accounts[_user].locks[_lockManager];\\n        amount = lock_.amount;\\n        allowance = lock_.allowance;\\n    }\\n\\n    /**\\n     * @dev Tell the current staked and locked balances for `_user`\\n     * @param _user Address\\n     * @return Staked balance\\n     * @return Locked balance\\n     */\\n    function getBalancesOf(address _user) external view returns (uint256 staked, uint256 locked) {\\n        staked = _totalStakedFor(_user);\\n        locked = _lockedBalanceOf(_user);\\n    }\\n\\n    /**\\n     * @dev Tell the current staked balance for `_user`\\n     * @param _user Address\\n     * @return Staked balance\\n     */\\n    function totalStakedFor(address _user) external view returns (uint256) {\\n        return _totalStakedFor(_user);\\n    }\\n\\n    /**\\n     * @dev Tell the total staked balance from all users\\n     * @return The total amount of staked tokens from all users\\n     */\\n    function totalStaked() external view returns (uint256) {\\n        return _totalStaked();\\n    }\\n\\n    /**\\n     * @dev Tell the staked balance for `_user` at block number `_blockNumber`\\n     * @param _user Address\\n     * @param _blockNumber Block height\\n     * @return Staked balance at the given block number\\n     */\\n    function totalStakedForAt(address _user, uint256 _blockNumber) external view returns (uint256) {\\n        require(_blockNumber <= MAX_UINT64, ERROR_BLOCKNUMBER_TOO_BIG);\\n\\n        return accounts[_user].stakedHistory.get(uint64(_blockNumber));\\n    }\\n\\n    /**\\n     * @dev Tell the total staked balance from all users at block number `_blockNumber`\\n     * @param _blockNumber Block height\\n     * @return The total amount of staked tokens from all users at the given block number\\n     */\\n    function totalStakedAt(uint256 _blockNumber) external view returns (uint256) {\\n        require(_blockNumber <= MAX_UINT64, ERROR_BLOCKNUMBER_TOO_BIG);\\n\\n        return totalStakedHistory.get(uint64(_blockNumber));\\n    }\\n\\n    /**\\n     * @dev Tell the portion of `user`'s staked balance that can be immediately withdrawn\\n     * @param _user Address\\n     * @return Amount of tokens available to be withdrawn\\n     */\\n    function unlockedBalanceOf(address _user) external view returns (uint256) {\\n        return _unlockedBalanceOf(_user);\\n    }\\n\\n    /**\\n     * @dev Check if `_sender` can unlock `@tokenAmount(self.token(): address, _amount)` from `_user`'s lock managed by `_lockManager`\\n     * @param _sender Address that would try to unlock tokens\\n     * @param _user Owner of lock\\n     * @param _lockManager Lock manager\\n     * @param _amount Amount of locked tokens to unlock. If zero, the full locked amount.\\n     * @return Whether sender is allowed to unlock tokens from the given lock\\n     */\\n    function canUnlock(address _sender, address _user, address _lockManager, uint256 _amount) external view returns (bool) {\\n        return _canUnlockUnsafe(_sender, _user, _lockManager, _amount);\\n    }\\n\\n    function _stakeFor(address _from, address _user, uint256 _amount, bytes memory _data) internal {\\n        // staking 0 tokens is invalid\\n        require(_amount > 0, ERROR_AMOUNT_ZERO);\\n\\n        // checkpoint updated staking balance\\n        uint256 newStake = _modifyStakeBalance(_user, _amount, true);\\n\\n        // checkpoint total supply\\n        _modifyTotalStaked(_amount, true);\\n\\n        // pull tokens into Staking contract\\n        require(token.safeTransferFrom(_from, address(this), _amount), ERROR_TOKEN_DEPOSIT);\\n\\n        emit Staked(_user, _amount, newStake, _data);\\n    }\\n\\n    /**\\n     * @dev Assumes the caller has already checked _amount > 0\\n     */\\n    function _unstake(address _from, uint256 _amount, bytes memory _data) internal {\\n        // checkpoint updated staking balance\\n        uint256 newStake = _modifyStakeBalance(_from, _amount, false);\\n\\n        // checkpoint total supply\\n        _modifyTotalStaked(_amount, false);\\n\\n        // transfer tokens\\n        require(token.safeTransfer(_from, _amount), ERROR_TOKEN_TRANSFER);\\n\\n        emit Unstaked(_from, _amount, newStake, _data);\\n    }\\n\\n    function _modifyStakeBalance(address _user, uint256 _by, bool _increase) internal returns (uint256) {\\n        uint256 currentStake = _totalStakedFor(_user);\\n\\n        uint256 newStake;\\n        if (_increase) {\\n            newStake = currentStake.add(_by);\\n        } else {\\n            require(_by <= _unlockedBalanceOf(_user), ERROR_NOT_ENOUGH_BALANCE);\\n            newStake = currentStake.sub(_by);\\n        }\\n\\n        // add new value to account history\\n        accounts[_user].stakedHistory.add(getBlockNumber64(), newStake);\\n\\n        return newStake;\\n    }\\n\\n    function _modifyTotalStaked(uint256 _by, bool _increase) internal {\\n        uint256 currentStake = _totalStaked();\\n\\n        uint256 newStake;\\n        if (_increase) {\\n            newStake = currentStake.add(_by);\\n        } else {\\n            newStake = currentStake.sub(_by);\\n        }\\n\\n        // add new value to total history\\n        totalStakedHistory.add(getBlockNumber64(), newStake);\\n    }\\n\\n    function _allowManager(address _lockManager, uint256 _allowance, bytes memory _data) internal {\\n        Lock storage lock_ = accounts[msg.sender].locks[_lockManager];\\n        // ensure lock doesn't exist yet\\n        require(lock_.allowance == 0, ERROR_LOCK_ALREADY_EXISTS);\\n\\n        emit NewLockManager(msg.sender, _lockManager, _data);\\n\\n        _increaseLockAllowance(_lockManager, lock_, _allowance);\\n    }\\n\\n    function _increaseLockAllowance(address _lockManager, Lock storage _lock, uint256 _allowance) internal {\\n        require(_allowance > 0, ERROR_AMOUNT_ZERO);\\n\\n        uint256 newAllowance = _lock.allowance.add(_allowance);\\n        _lock.allowance = newAllowance;\\n\\n        emit LockAllowanceChanged(msg.sender, _lockManager, newAllowance);\\n    }\\n\\n    /**\\n     * @dev Assumes `canUnlock` passes, i.e., either sender is the lock manager or it\\u2019s the owner,\\n     *      and the lock manager allows to unlock.\\n     */\\n    function _unlockUnsafe(address _user, address _lockManager, uint256 _amount) internal {\\n        Account storage account = accounts[_user];\\n        Lock storage lock_ = account.locks[_lockManager];\\n\\n        uint256 lockAmount = lock_.amount;\\n        require(lockAmount >= _amount, ERROR_NOT_ENOUGH_LOCK);\\n\\n        // update lock amount\\n        // No need for SafeMath: checked just above\\n        uint256 newAmount = lockAmount - _amount;\\n        lock_.amount = newAmount;\\n\\n        // update total\\n        account.totalLocked = account.totalLocked.sub(_amount);\\n\\n        emit LockAmountChanged(_user, _lockManager, newAmount);\\n    }\\n\\n    function _transfer(address _from, address _to, uint256 _amount) internal {\\n        // transferring 0 staked tokens is invalid\\n        require(_amount > 0, ERROR_AMOUNT_ZERO);\\n\\n        // update stakes\\n        _modifyStakeBalance(_from, _amount, false);\\n        _modifyStakeBalance(_to, _amount, true);\\n\\n        emit StakeTransferred(_from, _to, _amount);\\n    }\\n\\n    /**\\n     * @dev This is similar to a `_transfer()` followed by a `_unstake()`, but optimized to avoid spurious SSTOREs on modifying _to's checkpointed balance\\n     */\\n    function _transferAndUnstake(address _from, address _to, uint256 _amount) internal {\\n        // transferring 0 staked tokens is invalid\\n        require(_amount > 0, ERROR_AMOUNT_ZERO);\\n\\n        // update stake\\n        uint256 newStake = _modifyStakeBalance(_from, _amount, false);\\n\\n        // checkpoint total supply\\n        _modifyTotalStaked(_amount, false);\\n\\n        emit Unstaked(_from, _amount, newStake, new bytes(0));\\n\\n        // transfer tokens\\n        require(token.safeTransfer(_to, _amount), ERROR_TOKEN_TRANSFER);\\n    }\\n\\n    function _totalStakedFor(address _user) internal view returns (uint256) {\\n        // we assume it's not possible to stake in the future\\n        return accounts[_user].stakedHistory.getLast();\\n    }\\n\\n    function _totalStaked() internal view returns (uint256) {\\n        // we assume it's not possible to stake in the future\\n        return totalStakedHistory.getLast();\\n    }\\n\\n    function _unlockedBalanceOf(address _user) internal view returns (uint256) {\\n        return _totalStakedFor(_user).sub(_lockedBalanceOf(_user));\\n    }\\n\\n    function _lockedBalanceOf(address _user) internal view returns (uint256) {\\n        return accounts[_user].totalLocked;\\n    }\\n\\n    /**\\n     * @dev If calling this from a state modifying function trying to unlock tokens, make sure the first parameter is `msg.sender`.\\n     * @param _sender Address that would try to unlock tokens\\n     * @param _user Owner of lock\\n     * @param _lockManager Lock manager\\n     * @param _amount Amount of locked tokens to unlock. If zero, the full locked amount.\\n     * @return Whether sender is allowed to unlock tokens from the given lock\\n     */\\n    function _canUnlockUnsafe(address _sender, address _user, address _lockManager, uint256 _amount) internal view returns (bool) {\\n        Lock storage lock_ = accounts[_user].locks[_lockManager];\\n        require(lock_.allowance > 0, ERROR_LOCK_DOES_NOT_EXIST);\\n        require(lock_.amount >= _amount, ERROR_NOT_ENOUGH_LOCK);\\n\\n        uint256 amount = _amount == 0 ? lock_.amount : _amount;\\n\\n        // If the sender is the lock manager, unlocking is allowed\\n        if (_sender == _lockManager) {\\n            return true;\\n        }\\n\\n        // If the sender is neither the lock manager nor the owner, unlocking is not allowed\\n        if (_sender != _user) {\\n            return false;\\n        }\\n\\n        // The sender must be the user\\n        // Allow unlocking if the amount of locked tokens for the user has already been decreased to 0\\n        if (amount == 0) {\\n            return true;\\n        }\\n\\n        // Otherwise, check whether the lock manager allows unlocking\\n        return ILockManager(_lockManager).canUnlock(_user, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x6334234bbde4ec4c7689ce73cb66eddad60981050fbf6e41b829903f902f4e44\"},\"contracts/StakingFactory.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport \\\"./standards/IERC20.sol\\\";\\n\\nimport \\\"./Staking.sol\\\";\\n\\n\\ncontract StakingFactory {\\n    mapping (address => address) internal instances;\\n\\n    event NewStaking(address indexed instance, address indexed token);\\n\\n    function existsInstance(IERC20 _token) external view returns (bool) {\\n        return address(getInstance(_token)) != address(0);\\n    }\\n\\n    function getOrCreateInstance(IERC20 _token) external returns (Staking) {\\n        Staking instance = getInstance(_token);\\n        return address(instance) != address(0) ? instance : _createInstance(_token);\\n    }\\n\\n    function getInstance(IERC20 _token) public view returns (Staking) {\\n        return Staking(instances[address(_token)]);\\n    }\\n\\n    function _createInstance(IERC20 _token) internal returns (Staking) {\\n        Staking instance = new Staking(_token);\\n        address tokenAddress = address(_token);\\n        address instanceAddress = address(instance);\\n        instances[tokenAddress] = instanceAddress;\\n        emit NewStaking(instanceAddress, tokenAddress);\\n        return instance;\\n    }\\n}\\n\",\"keccak256\":\"0x1e1eb7aff8fbb19155653cf9c66ea1af9fccfc902fff4ed6044cd7cfa438b0e1\"},\"contracts/lib/Checkpointing.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n\\n/**\\n* @title Checkpointing - Library to handle a historic set of numeric values\\n*/\\nlibrary Checkpointing {\\n    uint256 private constant MAX_UINT192 = uint256(uint192(-1));\\n\\n    string private constant ERROR_VALUE_TOO_BIG = \\\"CHECKPOINT_VALUE_TOO_BIG\\\";\\n    string private constant ERROR_CANNOT_ADD_PAST_VALUE = \\\"CHECKPOINT_CANNOT_ADD_PAST_VALUE\\\";\\n\\n    /**\\n     * @dev To specify a value at a given point in time, we need to store two values:\\n     *      - `time`: unit-time value to denote the first time when a value was registered\\n     *      - `value`: a positive numeric value to registered at a given point in time\\n     *\\n     *      Note that `time` does not need to refer necessarily to a timestamp value, any time unit could be used\\n     *      for it like block numbers, terms, etc.\\n     */\\n    struct Checkpoint {\\n        uint64 time;\\n        uint192 value;\\n    }\\n\\n    /**\\n     * @dev A history simply denotes a list of checkpoints\\n     */\\n    struct History {\\n        Checkpoint[] history;\\n    }\\n\\n    /**\\n     * @dev Add a new value to a history for a given point in time. This function does not allow to add values previous\\n     *      to the latest registered value, if the value willing to add corresponds to the latest registered value, it\\n     *      will be updated.\\n     * @param self Checkpoints history to be altered\\n     * @param _time Point in time to register the given value\\n     * @param _value Numeric value to be registered at the given point in time\\n     */\\n    function add(History storage self, uint64 _time, uint256 _value) internal {\\n        require(_value <= MAX_UINT192, ERROR_VALUE_TOO_BIG);\\n        _add192(self, _time, uint192(_value));\\n    }\\n\\n    /**\\n     * TODO\\n     */\\n    function lastUpdate(History storage self) internal view returns (uint256) {\\n        uint256 length = self.history.length;\\n\\n        if (length > 0) {\\n            return uint256(self.history[length - 1].time);\\n        }\\n\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Fetch the latest registered value of history, it will return zero if there was no value registered\\n     * @param self Checkpoints history to be queried\\n     */\\n    function getLast(History storage self) internal view returns (uint256) {\\n        uint256 length = self.history.length;\\n        if (length > 0) {\\n            return uint256(self.history[length - 1].value);\\n        }\\n\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Fetch the most recent registered past value of a history based on a given point in time that is not known\\n     *      how recent it is beforehand. It will return zero if there is no registered value or if given time is\\n     *      previous to the first registered value.\\n     *      It uses a binary search.\\n     * @param self Checkpoints history to be queried\\n     * @param _time Point in time to query the most recent registered past value of\\n     */\\n    function get(History storage self, uint64 _time) internal view returns (uint256) {\\n        return _binarySearch(self, _time);\\n    }\\n\\n    /**\\n     * @dev Private function to add a new value to a history for a given point in time. This function does not allow to\\n     *      add values previous to the latest registered value, if the value willing to add corresponds to the latest\\n     *      registered value, it will be updated.\\n     * @param self Checkpoints history to be altered\\n     * @param _time Point in time to register the given value\\n     * @param _value Numeric value to be registered at the given point in time\\n     */\\n    function _add192(History storage self, uint64 _time, uint192 _value) private {\\n        uint256 length = self.history.length;\\n        if (length == 0) {\\n            // If there was no value registered, we can insert it to the history directly.\\n            self.history.push(Checkpoint(_time, _value));\\n        } else {\\n            Checkpoint storage currentCheckpoint = self.history[length - 1];\\n            uint256 currentCheckpointTime = uint256(currentCheckpoint.time);\\n\\n            if (_time > currentCheckpointTime) {\\n                // If the given point in time is after the latest registered value,\\n                // we can insert it to the history directly.\\n                self.history.push(Checkpoint(_time, _value));\\n            } else if (_time == currentCheckpointTime) {\\n                currentCheckpoint.value = _value;\\n            } else { // ensure list ordering\\n                // The given point cannot be before latest value, as past data cannot be changed\\n                revert(ERROR_CANNOT_ADD_PAST_VALUE);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to execute a binary search to find the most recent registered past value of a history based on\\n     *      a given point in time. It will return zero if there is no registered value or if given time is previous to\\n     *      the first registered value. Note that this function will be more suitable when don't know how recent the\\n     *      time used to index may be.\\n     * @param self Checkpoints history to be queried\\n     * @param _time Point in time to query the most recent registered past value of\\n     */\\n    function _binarySearch(History storage self, uint64 _time) private view returns (uint256) {\\n        // If there was no value registered for the given history return simply zero\\n        uint256 length = self.history.length;\\n        if (length == 0) {\\n            return 0;\\n        }\\n\\n        // If the requested time is equal to or after the time of the latest registered value, return latest value\\n        uint256 lastIndex = length - 1;\\n        Checkpoint storage lastCheckpoint = self.history[lastIndex];\\n        if (_time >= lastCheckpoint.time) {\\n            return uint256(lastCheckpoint.value);\\n        }\\n\\n        // If the requested time is previous to the first registered value, return zero to denote missing checkpoint\\n        if (length == 1 || _time < self.history[0].time) {\\n            return 0;\\n        }\\n\\n        // Execute a binary search between the checkpointed times of the history\\n        uint256 low = 0;\\n        uint256 high = lastIndex - 1;\\n\\n        while (high > low) {\\n            // No need for SafeMath: for this to overflow array size should be ~2^255\\n            uint256 mid = (high + low + 1) / 2;\\n            Checkpoint storage checkpoint = self.history[mid];\\n            uint64 midTime = checkpoint.time;\\n\\n            if (_time > midTime) {\\n                low = mid;\\n            } else if (_time < midTime) {\\n                // No need for SafeMath: high > low >= 0 => high >= 1 => mid >= 1\\n                high = mid - 1;\\n            } else {\\n                return uint256(checkpoint.value);\\n            }\\n        }\\n\\n        return uint256(self.history[low].value);\\n    }\\n}\\n\",\"keccak256\":\"0x21de37abed81b70c1c763a420faf4297edf600898a19fef4ccb35bd4a6432a0e\"},\"contracts/lib/os/IsContract.sol\":{\"content\":\"// Brought from https://github.com/aragon/aragonOS/blob/v4.3.0/contracts/common/IsContract.sol\\n// Adapted to use pragma ^0.5.8 and satisfy our linter rules\\n\\npragma solidity ^0.5.8;\\n\\n\\ncontract IsContract {\\n    /*\\n    * NOTE: this should NEVER be used for authentication\\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\\n    *\\n    * This is only intended to be used as a sanity check that an address is actually a contract,\\n    * RATHER THAN an address not being a contract.\\n    */\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x27e50127cbbad09c8a55a75930dca60355a186618049c2038d99a06612d164b2\"},\"contracts/lib/os/SafeERC20.sol\":{\"content\":\"// Brought from https://github.com/aragon/aragonOS/blob/v4.3.0/contracts/common/SafeERC20.sol\\n// Adapted to use pragma ^0.5.8 and satisfy our linter rules\\n\\npragma solidity ^0.5.8;\\n\\nimport \\\"../../standards/IERC20.sol\\\";\\n\\n\\nlibrary SafeERC20 {\\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\\n    // https://github.com/ethereum/solidity/issues/3544\\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransfer(IERC20 _token, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferCallData = abi.encodeWithSelector(\\n            TRANSFER_SELECTOR,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(address(_token), transferCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransferFrom(IERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferFromCallData = abi.encodeWithSelector(\\n            _token.transferFrom.selector,\\n            _from,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(address(_token), transferFromCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeApprove(IERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\\n        bytes memory approveCallData = abi.encodeWithSelector(\\n            _token.approve.selector,\\n            _spender,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(address(_token), approveCallData);\\n    }\\n\\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata) private returns (bool) {\\n        bool ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            let success := call(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                0,                    // no value\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n            // Check number of bytes returned from last function call\\n                switch returndatasize\\n\\n                // No bytes returned: assume success\\n                case 0 {\\n                    ret := 1\\n                }\\n\\n                // 32 bytes returned: check if non-zero\\n                case 0x20 {\\n                // Only return success if returned data was true\\n                // Already have output in ptr\\n                    ret := eq(mload(ptr), 1)\\n                }\\n\\n                // Not sure what was returned: don't mark as success\\n                default { }\\n            }\\n        }\\n        return ret;\\n    }\\n}\\n\",\"keccak256\":\"0x06cccdbaf484fe213aa16ed0d2abb1f48f0e102aef97d99a9461549d2398d806\"},\"contracts/lib/os/SafeMath.sol\":{\"content\":\"// Brought from https://github.com/aragon/aragonOS/blob/v4.3.0/contracts/lib/math/SafeMath.sol\\n// Adapted to use pragma ^0.5.8 and satisfy our linter rules\\n\\npragma solidity >=0.4.24 <0.6.0;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    string private constant ERROR_ADD_OVERFLOW = \\\"MATH_ADD_OVERFLOW\\\";\\n    string private constant ERROR_SUB_UNDERFLOW = \\\"MATH_SUB_UNDERFLOW\\\";\\n    string private constant ERROR_MUL_OVERFLOW = \\\"MATH_MUL_OVERFLOW\\\";\\n    string private constant ERROR_DIV_ZERO = \\\"MATH_DIV_ZERO\\\";\\n\\n    /**\\n    * @dev Multiplies two numbers, reverts on overflow.\\n    */\\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (_a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = _a * _b;\\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\\n        uint256 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\\n        uint256 c = _a - _b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, reverts on overflow.\\n    */\\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        uint256 c = _a + _b;\\n        require(c >= _a, ERROR_ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, ERROR_DIV_ZERO);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x6036ebab6d4a52731f880ec7449c2ed7e7f9b10412574ed43ae2c42abd8fb892\"},\"contracts/lib/os/TimeHelpers.sol\":{\"content\":\"// Brought from https://github.com/aragon/aragonOS/blob/v4.3.0/contracts/common/TimeHelpers.sol\\n// Adapted to use pragma ^0.5.8 and satisfy our linter rules\\n\\npragma solidity ^0.5.8;\\n\\nimport \\\"./Uint256Helpers.sol\\\";\\n\\n\\ncontract TimeHelpers {\\n    using Uint256Helpers for uint256;\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n    * @dev Returns the current block number, converted to uint64.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber64() internal view returns (uint64) {\\n        return getBlockNumber().toUint64();\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp() internal view returns (uint256) {\\n        return block.timestamp; // solium-disable-line security/no-block-members\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp, converted to uint64.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp64() internal view returns (uint64) {\\n        return getTimestamp().toUint64();\\n    }\\n}\\n\",\"keccak256\":\"0x7958528aa33a66597d4e92a3ff83e3b3e5a40e3cbae40104d13e6ce16472880c\"},\"contracts/lib/os/Uint256Helpers.sol\":{\"content\":\"// Brought from https://github.com/aragon/aragonOS/blob/v4.3.0/contracts/common/Uint256Helpers.sol\\n// Adapted to use pragma ^0.5.8 and satisfy our linter rules\\n\\npragma solidity ^0.5.8;\\n\\n\\nlibrary Uint256Helpers {\\n    uint256 private constant MAX_UINT8 = uint8(-1);\\n    uint256 private constant MAX_UINT64 = uint64(-1);\\n\\n    string private constant ERROR_UINT8_NUMBER_TOO_BIG = \\\"UINT8_NUMBER_TOO_BIG\\\";\\n    string private constant ERROR_UINT64_NUMBER_TOO_BIG = \\\"UINT64_NUMBER_TOO_BIG\\\";\\n\\n    function toUint8(uint256 a) internal pure returns (uint8) {\\n        require(a <= MAX_UINT8, ERROR_UINT8_NUMBER_TOO_BIG);\\n        return uint8(a);\\n    }\\n\\n    function toUint64(uint256 a) internal pure returns (uint64) {\\n        require(a <= MAX_UINT64, ERROR_UINT64_NUMBER_TOO_BIG);\\n        return uint64(a);\\n    }\\n}\\n\",\"keccak256\":\"0x9b22131e343305f10c088be545cd14d552c3e08b84fefd6cd45c21ffce29cff8\"},\"contracts/locking/ILockManager.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n\\ninterface ILockManager {\\n    /**\\n     * @notice Check if `_user`'s lock by `_lockManager` can be unlocked\\n     * @param _user Owner of lock\\n     * @param _amount Amount of locked tokens to unlock\\n     * @return Whether given user's lock can be unlocked\\n     */\\n    function canUnlock(address _user, uint256 _amount) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x002efdf2bd7a1acfdb59506688275f16743434a212d5874295de57d9958373b4\"},\"contracts/locking/ILockable.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n\\ninterface ILockable {\\n    event NewLockManager(address indexed user, address indexed lockManager, bytes data);\\n    event LockAmountChanged(address indexed user, address indexed lockManager, uint256 amount);\\n    event LockAllowanceChanged(address indexed user, address indexed lockManager, uint256 allowance);\\n    event LockManagerRemoved(address indexed user, address indexed lockManager);\\n    event LockManagerTransferred(address indexed user, address indexed oldLockManager, address indexed newLockManager);\\n\\n    function allowManager(address _lockManager, uint256 _allowance, bytes calldata _data) external;\\n    function unlockAndRemoveManager(address _user, address _lockManager) external;\\n    function increaseLockAllowance(address _lockManager, uint256 _allowance) external;\\n    function decreaseLockAllowance(address _user, address _lockManager, uint256 _allowance) external;\\n\\n    function lock(address _user, uint256 _amount) external;\\n    function unlock(address _user, address _lockManager, uint256 _amount) external;\\n    function slash(address _user, address _to, uint256 _amount) external;\\n    function slashAndUnstake(address _user, address _to, uint256 _amount) external;\\n\\n    function getLock(address _user, address _lockManager) external view returns (uint256 _amount, uint256 _allowance);\\n    function unlockedBalanceOf(address _user) external view returns (uint256);\\n    function lockedBalanceOf(address _user) external view returns (uint256);\\n    function getBalancesOf(address _user) external view returns (uint256 staked, uint256 locked);\\n    function canUnlock(address _sender, address _user, address _lockManager, uint256 _amount) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1402da566ca97d7fd0d762658edd90bbff1deff378113b77ce120221989cda83\"},\"contracts/standards/IApproveAndCallFallBack.sol\":{\"content\":\"// See MiniMe token (https://github.com/Giveth/minime/blob/master/contracts/MiniMeToken.sol)\\n\\npragma solidity ^0.5.17;\\n\\n\\ninterface IApproveAndCallFallBack {\\n    function receiveApproval(\\n        address from,\\n        uint256 _amount,\\n        address _token,\\n        bytes calldata _data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x187e7743fcc4d19cf64994f0933c93423fdc153ad80713778c9fa08ec656cc9c\"},\"contracts/standards/IERC20.sol\":{\"content\":\"// Brought from https://github.com/aragon/aragonOS/blob/v4.3.0/contracts/lib/token/ERC20.sol\\n// Adapted to use pragma ^0.5.17 and satisfy our linter rules\\n\\npragma solidity ^0.5.17;\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _who) external view returns (uint256);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x48caaac04c966c2f983d4c3ed333146eaf0330b91665ac51181328754e326b8e\"},\"contracts/standards/IERC900.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n\\n// Interface for ERC900: https://eips.ethereum.org/EIPS/eip-900\\ninterface IERC900 {\\n    event Staked(address indexed user, uint256 amount, uint256 total, bytes data);\\n    event Unstaked(address indexed user, uint256 amount, uint256 total, bytes data);\\n\\n    /**\\n     * @dev Stake a certain amount of tokens\\n     * @param _amount Amount of tokens to be staked\\n     * @param _data Optional data that can be used to add signalling information in more complex staking applications\\n     */\\n    function stake(uint256 _amount, bytes calldata _data) external;\\n\\n    /**\\n     * @dev Stake a certain amount of tokens to another address\\n     * @param _user Address to stake tokens to\\n     * @param _amount Amount of tokens to be staked\\n     * @param _data Optional data that can be used to add signalling information in more complex staking applications\\n     */\\n    function stakeFor(address _user, uint256 _amount, bytes calldata _data) external;\\n\\n    /**\\n     * @dev Unstake a certain amount of tokens\\n     * @param _amount Amount of tokens to be unstaked\\n     * @param _data Optional data that can be used to add signalling information in more complex staking applications\\n     */\\n    function unstake(uint256 _amount, bytes calldata _data) external;\\n\\n    /**\\n     * @dev Tell the current total amount of tokens staked for an address\\n     * @param _addr Address to query\\n     * @return Current total amount of tokens staked for the address\\n     */\\n    function totalStakedFor(address _addr) external view returns (uint256);\\n\\n    /**\\n     * @dev Tell the current total amount of tokens staked from all addresses\\n     * @return Current total amount of tokens staked from all addresses\\n     */\\n    function totalStaked() external view returns (uint256);\\n\\n    /**\\n     * @dev Tell the address of the staking token\\n     * @return Address of the staking token\\n     */\\n    function token() external view returns (address);\\n\\n    /*\\n     * @dev Tell if the optional history functions are implemented\\n     * @return True if the optional history functions are implemented\\n     */\\n    function supportsHistory() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xcda9e7401893556acaf1ad03b0873777a6f4b69a92bce0d1035d4ba081ec90f0\"},\"contracts/standards/IERC900History.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n\\n// Interface for ERC900: https://eips.ethereum.org/EIPS/eip-900, optional History methods\\ninterface IERC900History {\\n    /**\\n     * @dev Tell last time a user modified their staked balance\\n     * @param _user Address to query\\n     * @return Last block number when address's balance was modified\\n     */\\n    function lastStakedFor(address _user) external view returns (uint256);\\n\\n    /**\\n     * @dev Tell the total amount of tokens staked for an address at a given block number\\n     * @param _user Address to query\\n     * @param _blockNumber Block number\\n     * @return Total amount of tokens staked for the address at the given block number\\n     */\\n    function totalStakedForAt(address _user, uint256 _blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Tell the total amount of tokens staked from all addresses at a given block number\\n     * @param _blockNumber Block number\\n     * @return Total amount of tokens staked from all addresses at the given block number\\n     */\\n    function totalStakedAt(uint256 _blockNumber) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2cc43277766bafb5ae0f2f2b79160a38a3c1ac36df73bac7b179536af3df84cd\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506130c0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630a5c546d1461004657806347b24004146100a2578063c646a93c146100e9575b600080fd5b6100796004803603602081101561005c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661011c565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100d5600480360360208110156100b857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610147565b604080519115158252519081900360200190f35b610079600480360360208110156100ff57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610171565b73ffffffffffffffffffffffffffffffffffffffff9081166000908152602081905260409020541690565b6000806101538361011c565b73ffffffffffffffffffffffffffffffffffffffff16141592915050565b60008061017d8361011c565b905073ffffffffffffffffffffffffffffffffffffffff81166101a8576101a3836101b1565b6101aa565b805b9392505050565b600080826040516101c190610284565b73ffffffffffffffffffffffffffffffffffffffff909116815260405190819003602001906000f0801580156101fb573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff84811660008181526020819052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001694861694851790555193945086938593917f1670225398b7c267d85ba0ff79619a3e9d41ceab77073bb4a0c8ee48ddb20adf91a350909392505050565b612dfa806102928339019056fe60806040523480156200001157600080fd5b5060405162002dfa38038062002dfa833981810160405260208110156200003757600080fd5b50516200004d816001600160e01b036200013716565b6040518060400160405280601a81526020017f5354414b494e475f544f4b454e5f4e4f545f434f4e545241435400000000000081525090620001105760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620000d4578181015183820152602001620000ba565b50505050905090810190601f168015620001025780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600080546001600160a01b0319166001600160a01b03929092169190911790556200015c565b60006001600160a01b038216620001515750600062000157565b50803b15155b919050565b612c8e806200016c6000396000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c8063722914af116100f9578063c8fd6ed011610097578063d6ab3b7f11610071578063d6ab3b7f14610771578063e74f823914610797578063ede38421146107cd578063fc0c546a146107f9576101b9565b8063c8fd6ed0146106a1578063c9c5323214610718578063cac3f6fb14610735576101b9565b80638f4ffcb1116100d35780638f4ffcb1146105355780639a0b7205146105c4578063a9059cbb146105f0578063b29790491461061c576101b9565b8063722914af146104db578063817b1cd21461050757806384955c881461050f576101b9565b80634b341aed1161016657806359508f8f1161014057806359508f8f1461041757806365c120981461044d5780636ce2d92b146104835780637033e4a6146104d3576101b9565b80634b341aed1461039557806358f21872146103bb57806359355736146103f1576101b9565b8063282d3fdf11610197578063282d3fdf146102f457806334cf8c5914610320578063433ea1ec1461034e576101b9565b80630e89439b146101be5780630ef9635614610237578063233b7451146102bc575b600080fd5b610235600480360360408110156101d457600080fd5b813591908101906040810160208201356401000000008111156101f657600080fd5b82018360208201111561020857600080fd5b8035906020019184600183028401116401000000008311171561022a57600080fd5b50909250905061081d565b005b6102356004803603606081101561024d57600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561027d57600080fd5b82018360208201111561028f57600080fd5b803590602001918460018302840111640100000000831117156102b157600080fd5b509092509050610864565b6102e2600480360360208110156102d257600080fd5b50356001600160a01b03166108ac565b60408051918252519081900360200190f35b6102356004803603604081101561030a57600080fd5b506001600160a01b0381351690602001356108d8565b6102356004803603604081101561033657600080fd5b506001600160a01b0381358116916020013516610b50565b61037c6004803603604081101561036457600080fd5b506001600160a01b0381358116916020013516610cd0565b6040805192835260208301919091528051918290030190f35b6102e2600480360360208110156103ab57600080fd5b50356001600160a01b0316610d03565b610235600480360360608110156103d157600080fd5b506001600160a01b03813581169160208101359091169060400135610d0e565b6102e26004803603602081101561040757600080fd5b50356001600160a01b0316610d24565b6102356004803603606081101561042d57600080fd5b506001600160a01b03813581169160208101359091169060400135610d2f565b6102356004803603606081101561046357600080fd5b506001600160a01b03813581169160208101359091169060400135610e4a565b6104bf6004803603608081101561049957600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135611102565b604080519115158252519081900360200190f35b6104bf61111b565b610235600480360360408110156104f157600080fd5b506001600160a01b038135169060200135611120565b6102e26111d6565b6102e26004803603602081101561052557600080fd5b50356001600160a01b03166111e5565b6102356004803603608081101561054b57600080fd5b6001600160a01b03823581169260208101359260408201359092169181019060808101606082013564010000000081111561058557600080fd5b82018360208201111561059757600080fd5b803590602001918460018302840111640100000000831117156105b957600080fd5b5090925090506111f0565b610235600480360360408110156105da57600080fd5b506001600160a01b0381351690602001356112e1565b6102356004803603604081101561060657600080fd5b506001600160a01b0381351690602001356112f0565b6102356004803603606081101561063257600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561066257600080fd5b82018360208201111561067457600080fd5b8035906020019184600183028401116401000000008311171561069657600080fd5b5090925090506112fb565b610235600480360360408110156106b757600080fd5b813591908101906040810160208201356401000000008111156106d957600080fd5b8201836020820111156106eb57600080fd5b8035906020019184600183028401116401000000008311171561070d57600080fd5b50909250905061133c565b6102e26004803603602081101561072e57600080fd5b50356113fe565b6102356004803603608081101561074b57600080fd5b506001600160a01b0381358116916020810135909116906040810135906060013561149e565b61037c6004803603602081101561078757600080fd5b50356001600160a01b03166114c3565b610235600480360360608110156107ad57600080fd5b506001600160a01b038135811691602081013590911690604001356114e1565b6102e2600480360360408110156107e357600080fd5b506001600160a01b0381351690602001356114f7565b6108016115ba565b604080516001600160a01b039092168252519081900360200190f35b61085f33338585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506115c992505050565b505050565b6108a633858585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506115c992505050565b50505050565b6001600160a01b03811660009081526001602052604081206108d0906002016117c0565b90505b919050565b60408051808201909152601381527f5354414b494e475f414d4f554e545f5a45524f000000000000000000000000006020820152816109955760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561095a578181015183820152602001610942565b50505050905090810190601f1680156109875780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5061099f82611805565b8111156040518060400160405280601a81526020017f5354414b494e475f4e4f545f454e4f5547485f42414c414e434500000000000081525090610a245760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b506001600160a01b0382166000908152600160209081526040808320338452918290528220805491929091610a5f908563ffffffff61182816565b905081600101548111156040518060400160405280601c81526020017f5354414b494e475f4e4f545f454e4f5547485f414c4c4f57414e43450000000081525090610aeb5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b508082556001830154610b04908563ffffffff61182816565b600184015560408051828152905133916001600160a01b038816917fe5fa7959d07a49023f056773acdae23061f2ed83666b174c4d3ad25c84bd395a9181900360200190a35050505050565b610b5d33838360006118ba565b6040518060400160405280601581526020017f5354414b494e475f43414e4e4f545f554e4c4f434b000000000000000000000081525090610bdf5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b506001600160a01b038083166000908152600160208181526040808420948616845290849052909120805491830154909190610c21908263ffffffff611af016565b6001840155604080516000815290516001600160a01b0380871692908816917fe5fa7959d07a49023f056773acdae23061f2ed83666b174c4d3ad25c84bd395a9181900360200190a3836001600160a01b0316856001600160a01b03167ff3432d503b0a213f2ba362cb1d618ffae11bce483f826749e5d88ac1185a86f660405160405180910390a350506001600160a01b039091166000908152602091909152604081208181556001015550565b6001600160a01b039182166000908152600160208181526040808420949095168352929092529190912080549101549091565b60006108d082611b7f565b610d19833383611ba3565b61085f838383611cbe565b60006108d082611eb9565b60408051808201909152601381527f5354414b494e475f414d4f554e545f5a45524f00000000000000000000000000602082015281610daf5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b50610dbc338484846118ba565b6040518060400160405280601581526020017f5354414b494e475f43414e4e4f545f554e4c4f434b000000000000000000000081525090610e3e5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b5061085f838383611ba3565b336001600160a01b0384161480610e695750336001600160a01b038316145b6040518060400160405280601f81526020017f5354414b494e475f43414e4e4f545f4348414e47455f414c4c4f57414e43450081525090610eeb5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b5060408051808201909152601381527f5354414b494e475f414d4f554e545f5a45524f00000000000000000000000000602082015281610f6c5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b506001600160a01b038084166000908152600160208181526040808420948716845293905291812091820154610fa8908463ffffffff611af016565b825460408051808201909152601c81527f5354414b494e475f4e4f545f454e4f5547485f414c4c4f57414e434500000000602082015291925082101561102f5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b5060408051808201909152601681527f5354414b494e475f414c4c4f57414e43455f5a45524f000000000000000000006020820152816110b05760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b50600182018190556040805182815290516001600160a01b0380871692908816917f34ef02a331da5344779c32380b51356398a989bef946d9dd8839938900f9ebce9181900360200190a35050505050565b6000611110858585856118ba565b90505b949350505050565b600190565b3360009081526001602081815260408084206001600160a01b0387168552825292839020918201548351808501909452601b84527f5354414b494e475f4c4f434b5f444f45535f4e4f545f45584953540000000000918401919091529091906111ca5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b5061085f838284611ed8565b60006111e0611fc2565b905090565b60006108d082611805565b6001600160a01b0383163314801561121557506000546001600160a01b038481169116145b6040518060400160405280601381526020017f5354414b494e475f57524f4e475f544f4b454e00000000000000000000000000815250906112975760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b506112da85868685858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506115c992505050565b5050505050565b6112ec338383611cbe565b5050565b6112ec338383611fce565b6108a6848484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506120b992505050565b60408051808201909152601381527f5354414b494e475f414d4f554e545f5a45524f000000000000000000000000006020820152836113bc5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b5061085f338484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061221d92505050565b60408051808201909152601b81527f5354414b494e475f424c4f434b4e554d4245525f544f4f5f4249470000000000602082015260009067ffffffffffffffff83111561148c5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b506108d060028363ffffffff61239116565b6114b884336114b3858563ffffffff61182816565b611ba3565b6108a6848483611fce565b6000806114cf83611b7f565b91506114da83611eb9565b9050915091565b6114ec833383611ba3565b61085f838383611fce565b60408051808201909152601b81527f5354414b494e475f424c4f434b4e554d4245525f544f4f5f4249470000000000602082015260009067ffffffffffffffff8311156115855760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b506001600160a01b03831660009081526001602052604090206115b1906002018363ffffffff61239116565b90505b92915050565b6000546001600160a01b031681565b60408051808201909152601381527f5354414b494e475f414d4f554e545f5a45524f000000000000000000000000006020820152826116495760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b5060006116588484600161239d565b90506116658360016124a8565b600054611683906001600160a01b031686308663ffffffff61250016565b6040518060400160405280601a81526020017f5354414b494e475f544f4b454e5f4445504f5349545f4641494c000000000000815250906117055760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b50836001600160a01b03167fc65e53b88159e7d2c0fc12a0600072e28ae53ff73b4c1715369c30f1609351428483856040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561177d578181015183820152602001611765565b50505050905090810190601f1680156117aa5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a25050505050565b805460009080156117fc578260000160018203815481106117dd57fe5b60009182526020909120015467ffffffffffffffff1691506108d39050565b50600092915050565b60006108d061181383611eb9565b61181c84611b7f565b9063ffffffff611af016565b60408051808201909152601181527f4d4154485f4144445f4f564552464c4f57000000000000000000000000000000602082015260009083830190848210156118b25760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b509392505050565b6001600160a01b0380841660009081526001602081815260408084209487168452938152838320918201548451808601909552601b85527f5354414b494e475f4c4f434b5f444f45535f4e4f545f4558495354000000000091850191909152919290916119685760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b50805460408051808201909152601781527f5354414b494e475f4e4f545f454e4f5547485f4c4f434b0000000000000000006020820152908411156119ee5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b50600083156119fd5783611a00565b81545b9050846001600160a01b0316876001600160a01b03161415611a2757600192505050611113565b856001600160a01b0316876001600160a01b031614611a4b57600092505050611113565b80611a5b57600192505050611113565b846001600160a01b03166332c6534b87836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b031681526020018281526020019250505060206040518083038186803b158015611ab957600080fd5b505afa158015611acd573d6000803e3d6000fd5b505050506040513d6020811015611ae357600080fd5b5051979650505050505050565b6000828211156040518060400160405280601281526020017f4d4154485f5355425f554e444552464c4f57000000000000000000000000000081525090611b785760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b5050900390565b6001600160a01b03811660009081526001602052604081206108d090600201612594565b6001600160a01b03808416600090815260016020908152604080832093861683528382529182902080548351808501909452601784527f5354414b494e475f4e4f545f454e4f5547485f4c4f434b000000000000000000928401929092529184821015611c515760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b508381038083556001840154611c6d908663ffffffff611af016565b60018501556040805182815290516001600160a01b0380891692908a16917fe5fa7959d07a49023f056773acdae23061f2ed83666b174c4d3ad25c84bd395a9181900360200190a350505050505050565b60408051808201909152601381527f5354414b494e475f414d4f554e545f5a45524f00000000000000000000000000602082015281611d3e5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b506000611d4d8483600061239d565b9050611d5a8260006124a8565b6040805160008082526020820180845285815292820184905260608083019081528251608084018190526001600160a01b038916947faf01bfc8475df280aca00b578c4a948e6d95700f0db8c13365240f7f973c87549488948894919360a08501918491908190849084905b83811015611dde578181015183820152602001611dc6565b50505050905090810190601f168015611e0b5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a2600054611e37906001600160a01b0316848463ffffffff6125ec16565b6040518060400160405280601b81526020017f5354414b494e475f544f4b454e5f5452414e534645525f4641494c0000000000815250906112da5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b6001600160a01b03166000908152600160208190526040909120015490565b60408051808201909152601381527f5354414b494e475f414d4f554e545f5a45524f00000000000000000000000000602082015281611f585760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b506001820154600090611f71908363ffffffff61182816565b600184018190556040805182815290519192506001600160a01b0386169133917f34ef02a331da5344779c32380b51356398a989bef946d9dd8839938900f9ebce919081900360200190a350505050565b60006111e06002612594565b60408051808201909152601381527f5354414b494e475f414d4f554e545f5a45524f0000000000000000000000000060208201528161204e5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b5061205b8382600061239d565b506120688282600161239d565b50816001600160a01b0316836001600160a01b03167f1e07278daf12d879e91ea076cf43032a70d56cb1d6e8bc91534dcd17f61e18f3836040518082815260200191505060405180910390a3505050565b3360009081526001602081815260408084206001600160a01b0388168552825292839020918201548351808501909452601b84527f5354414b494e475f4c4f434b5f414c52454144595f455849535453000000000091840191909152909190156121645760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b50836001600160a01b0316336001600160a01b03167f9bc888ab5ee77cb1d3110ed41a6f406608a152b75aa4f0ea5a894e3eafbcff38846040518080602001828103825283818151815260200191508051906020019080838360005b838110156121d85781810151838201526020016121c0565b50505050905090810190601f1680156122055780820380516001836020036101000a031916815260200191505b509250505060405180910390a36108a6848285611ed8565b600061222b8484600061239d565b90506122388360006124a8565b600054612255906001600160a01b0316858563ffffffff6125ec16565b6040518060400160405280601b81526020017f5354414b494e475f544f4b454e5f5452414e534645525f4641494c0000000000815250906122d75760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b50836001600160a01b03167faf01bfc8475df280aca00b578c4a948e6d95700f0db8c13365240f7f973c87548483856040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561234f578181015183820152602001612337565b50505050905090810190601f16801561237c5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a250505050565b60006115b1838361266e565b6000806123a985611b7f565b9050600083156123ca576123c3828663ffffffff61182816565b905061246c565b6123d386611805565b8511156040518060400160405280601a81526020017f5354414b494e475f4e4f545f454e4f5547485f42414c414e4345000000000000815250906124585760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b50612469828663ffffffff611af016565b90505b61249f61247761287d565b6001600160a01b0388166000908152600160205260409020600201908363ffffffff61288f16565b95945050505050565b60006124b2611fc2565b9050600082156124d3576124cc828563ffffffff61182816565b90506124e6565b6124e3828563ffffffff611af016565b90505b6108a66124f161287d565b6002908363ffffffff61288f16565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905260009061258a8682612936565b9695505050505050565b805460009080156117fc578260000160018203815481106125b157fe5b60009182526020909120015468010000000000000000900477ffffffffffffffffffffffffffffffffffffffffffffffff1691506108d39050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905260009061249f8582612936565b8154600090806126825760009150506115b4565b83547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8201906000908690839081106126b757fe5b6000918252602090912001805490915067ffffffffffffffff9081169086161061270c575468010000000000000000900477ffffffffffffffffffffffffffffffffffffffffffffffff1692506115b4915050565b826001148061274357508560000160008154811061272657fe5b60009182526020909120015467ffffffffffffffff908116908616105b1561275457600093505050506115b4565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83015b81811115612830578754600283830160010104906000908a908390811061279d57fe5b6000918252602090912001805490915067ffffffffffffffff908116908a168110156127cb57829450612828565b8067ffffffffffffffff168a67ffffffffffffffff1610156127f257600183039350612828565b505468010000000000000000900477ffffffffffffffffffffffffffffffffffffffffffffffff1696506115b495505050505050565b50505061277a565b87600001828154811061283f57fe5b60009182526020909120015468010000000000000000900477ffffffffffffffffffffffffffffffffffffffffffffffff1698975050505050505050565b60006111e061288a612981565b612985565b60408051808201909152601881527f434845434b504f494e545f56414c55455f544f4f5f4249470000000000000000602082015277ffffffffffffffffffffffffffffffffffffffffffffffff82111561292a5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b5061085f838383612a1a565b6000806040516020818551602087016000895af18015612977573d8015612964576020811461296d57612975565b60019350612975565b600183511493505b505b5090949350505050565b4390565b60408051808201909152601581527f55494e5436345f4e554d4245525f544f4f5f4249470000000000000000000000602082015260009067ffffffffffffffff831115612a135760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b5090919050565b825480612aba576040805180820190915267ffffffffffffffff808516825277ffffffffffffffffffffffffffffffffffffffffffffffff80851660208085019182528854600181018a5560008a815291909120945194018054915190921668010000000000000000029383167fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000909116179091169190911790556108a6565b6000846000016001830381548110612ace57fe5b6000918252602090912001805490915067ffffffffffffffff908116908516811015612b8d576040805180820190915267ffffffffffffffff808716825277ffffffffffffffffffffffffffffffffffffffffffffffff80871660208085019182528a54600181018c5560008c815291909120945194018054915190921668010000000000000000029383167fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090911617909116919091179055612c51565b808567ffffffffffffffff161415612bd957815467ffffffffffffffff166801000000000000000077ffffffffffffffffffffffffffffffffffffffffffffffff861602178255612c51565b60408051808201825260208082527f434845434b504f494e545f43414e4e4f545f4144445f504153545f56414c5545818301908152925162461bcd60e51b815260048101918252825160248201528251929391928392604490920191908083836000831561095a578181015183820152602001610942565b50505050505056fea265627a7a72315820f4d519b504e52b72909f1f98e9e6af61aed5bc0eb319f8aa4772bb3591ad040964736f6c63430005110032a265627a7a723158206899830705ed8e633fefd509caa0f41c60b445ddb153b26ace8c2c86daf80d4464736f6c63430005110032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80630a5c546d1461004657806347b24004146100a2578063c646a93c146100e9575b600080fd5b6100796004803603602081101561005c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661011c565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100d5600480360360208110156100b857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610147565b604080519115158252519081900360200190f35b610079600480360360208110156100ff57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610171565b73ffffffffffffffffffffffffffffffffffffffff9081166000908152602081905260409020541690565b6000806101538361011c565b73ffffffffffffffffffffffffffffffffffffffff16141592915050565b60008061017d8361011c565b905073ffffffffffffffffffffffffffffffffffffffff81166101a8576101a3836101b1565b6101aa565b805b9392505050565b600080826040516101c190610284565b73ffffffffffffffffffffffffffffffffffffffff909116815260405190819003602001906000f0801580156101fb573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff84811660008181526020819052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001694861694851790555193945086938593917f1670225398b7c267d85ba0ff79619a3e9d41ceab77073bb4a0c8ee48ddb20adf91a350909392505050565b612dfa806102928339019056fe60806040523480156200001157600080fd5b5060405162002dfa38038062002dfa833981810160405260208110156200003757600080fd5b50516200004d816001600160e01b036200013716565b6040518060400160405280601a81526020017f5354414b494e475f544f4b454e5f4e4f545f434f4e545241435400000000000081525090620001105760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620000d4578181015183820152602001620000ba565b50505050905090810190601f168015620001025780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600080546001600160a01b0319166001600160a01b03929092169190911790556200015c565b60006001600160a01b038216620001515750600062000157565b50803b15155b919050565b612c8e806200016c6000396000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c8063722914af116100f9578063c8fd6ed011610097578063d6ab3b7f11610071578063d6ab3b7f14610771578063e74f823914610797578063ede38421146107cd578063fc0c546a146107f9576101b9565b8063c8fd6ed0146106a1578063c9c5323214610718578063cac3f6fb14610735576101b9565b80638f4ffcb1116100d35780638f4ffcb1146105355780639a0b7205146105c4578063a9059cbb146105f0578063b29790491461061c576101b9565b8063722914af146104db578063817b1cd21461050757806384955c881461050f576101b9565b80634b341aed1161016657806359508f8f1161014057806359508f8f1461041757806365c120981461044d5780636ce2d92b146104835780637033e4a6146104d3576101b9565b80634b341aed1461039557806358f21872146103bb57806359355736146103f1576101b9565b8063282d3fdf11610197578063282d3fdf146102f457806334cf8c5914610320578063433ea1ec1461034e576101b9565b80630e89439b146101be5780630ef9635614610237578063233b7451146102bc575b600080fd5b610235600480360360408110156101d457600080fd5b813591908101906040810160208201356401000000008111156101f657600080fd5b82018360208201111561020857600080fd5b8035906020019184600183028401116401000000008311171561022a57600080fd5b50909250905061081d565b005b6102356004803603606081101561024d57600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561027d57600080fd5b82018360208201111561028f57600080fd5b803590602001918460018302840111640100000000831117156102b157600080fd5b509092509050610864565b6102e2600480360360208110156102d257600080fd5b50356001600160a01b03166108ac565b60408051918252519081900360200190f35b6102356004803603604081101561030a57600080fd5b506001600160a01b0381351690602001356108d8565b6102356004803603604081101561033657600080fd5b506001600160a01b0381358116916020013516610b50565b61037c6004803603604081101561036457600080fd5b506001600160a01b0381358116916020013516610cd0565b6040805192835260208301919091528051918290030190f35b6102e2600480360360208110156103ab57600080fd5b50356001600160a01b0316610d03565b610235600480360360608110156103d157600080fd5b506001600160a01b03813581169160208101359091169060400135610d0e565b6102e26004803603602081101561040757600080fd5b50356001600160a01b0316610d24565b6102356004803603606081101561042d57600080fd5b506001600160a01b03813581169160208101359091169060400135610d2f565b6102356004803603606081101561046357600080fd5b506001600160a01b03813581169160208101359091169060400135610e4a565b6104bf6004803603608081101561049957600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135611102565b604080519115158252519081900360200190f35b6104bf61111b565b610235600480360360408110156104f157600080fd5b506001600160a01b038135169060200135611120565b6102e26111d6565b6102e26004803603602081101561052557600080fd5b50356001600160a01b03166111e5565b6102356004803603608081101561054b57600080fd5b6001600160a01b03823581169260208101359260408201359092169181019060808101606082013564010000000081111561058557600080fd5b82018360208201111561059757600080fd5b803590602001918460018302840111640100000000831117156105b957600080fd5b5090925090506111f0565b610235600480360360408110156105da57600080fd5b506001600160a01b0381351690602001356112e1565b6102356004803603604081101561060657600080fd5b506001600160a01b0381351690602001356112f0565b6102356004803603606081101561063257600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561066257600080fd5b82018360208201111561067457600080fd5b8035906020019184600183028401116401000000008311171561069657600080fd5b5090925090506112fb565b610235600480360360408110156106b757600080fd5b813591908101906040810160208201356401000000008111156106d957600080fd5b8201836020820111156106eb57600080fd5b8035906020019184600183028401116401000000008311171561070d57600080fd5b50909250905061133c565b6102e26004803603602081101561072e57600080fd5b50356113fe565b6102356004803603608081101561074b57600080fd5b506001600160a01b0381358116916020810135909116906040810135906060013561149e565b61037c6004803603602081101561078757600080fd5b50356001600160a01b03166114c3565b610235600480360360608110156107ad57600080fd5b506001600160a01b038135811691602081013590911690604001356114e1565b6102e2600480360360408110156107e357600080fd5b506001600160a01b0381351690602001356114f7565b6108016115ba565b604080516001600160a01b039092168252519081900360200190f35b61085f33338585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506115c992505050565b505050565b6108a633858585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506115c992505050565b50505050565b6001600160a01b03811660009081526001602052604081206108d0906002016117c0565b90505b919050565b60408051808201909152601381527f5354414b494e475f414d4f554e545f5a45524f000000000000000000000000006020820152816109955760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561095a578181015183820152602001610942565b50505050905090810190601f1680156109875780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5061099f82611805565b8111156040518060400160405280601a81526020017f5354414b494e475f4e4f545f454e4f5547485f42414c414e434500000000000081525090610a245760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b506001600160a01b0382166000908152600160209081526040808320338452918290528220805491929091610a5f908563ffffffff61182816565b905081600101548111156040518060400160405280601c81526020017f5354414b494e475f4e4f545f454e4f5547485f414c4c4f57414e43450000000081525090610aeb5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b508082556001830154610b04908563ffffffff61182816565b600184015560408051828152905133916001600160a01b038816917fe5fa7959d07a49023f056773acdae23061f2ed83666b174c4d3ad25c84bd395a9181900360200190a35050505050565b610b5d33838360006118ba565b6040518060400160405280601581526020017f5354414b494e475f43414e4e4f545f554e4c4f434b000000000000000000000081525090610bdf5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b506001600160a01b038083166000908152600160208181526040808420948616845290849052909120805491830154909190610c21908263ffffffff611af016565b6001840155604080516000815290516001600160a01b0380871692908816917fe5fa7959d07a49023f056773acdae23061f2ed83666b174c4d3ad25c84bd395a9181900360200190a3836001600160a01b0316856001600160a01b03167ff3432d503b0a213f2ba362cb1d618ffae11bce483f826749e5d88ac1185a86f660405160405180910390a350506001600160a01b039091166000908152602091909152604081208181556001015550565b6001600160a01b039182166000908152600160208181526040808420949095168352929092529190912080549101549091565b60006108d082611b7f565b610d19833383611ba3565b61085f838383611cbe565b60006108d082611eb9565b60408051808201909152601381527f5354414b494e475f414d4f554e545f5a45524f00000000000000000000000000602082015281610daf5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b50610dbc338484846118ba565b6040518060400160405280601581526020017f5354414b494e475f43414e4e4f545f554e4c4f434b000000000000000000000081525090610e3e5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b5061085f838383611ba3565b336001600160a01b0384161480610e695750336001600160a01b038316145b6040518060400160405280601f81526020017f5354414b494e475f43414e4e4f545f4348414e47455f414c4c4f57414e43450081525090610eeb5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b5060408051808201909152601381527f5354414b494e475f414d4f554e545f5a45524f00000000000000000000000000602082015281610f6c5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b506001600160a01b038084166000908152600160208181526040808420948716845293905291812091820154610fa8908463ffffffff611af016565b825460408051808201909152601c81527f5354414b494e475f4e4f545f454e4f5547485f414c4c4f57414e434500000000602082015291925082101561102f5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b5060408051808201909152601681527f5354414b494e475f414c4c4f57414e43455f5a45524f000000000000000000006020820152816110b05760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b50600182018190556040805182815290516001600160a01b0380871692908816917f34ef02a331da5344779c32380b51356398a989bef946d9dd8839938900f9ebce9181900360200190a35050505050565b6000611110858585856118ba565b90505b949350505050565b600190565b3360009081526001602081815260408084206001600160a01b0387168552825292839020918201548351808501909452601b84527f5354414b494e475f4c4f434b5f444f45535f4e4f545f45584953540000000000918401919091529091906111ca5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b5061085f838284611ed8565b60006111e0611fc2565b905090565b60006108d082611805565b6001600160a01b0383163314801561121557506000546001600160a01b038481169116145b6040518060400160405280601381526020017f5354414b494e475f57524f4e475f544f4b454e00000000000000000000000000815250906112975760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b506112da85868685858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506115c992505050565b5050505050565b6112ec338383611cbe565b5050565b6112ec338383611fce565b6108a6848484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506120b992505050565b60408051808201909152601381527f5354414b494e475f414d4f554e545f5a45524f000000000000000000000000006020820152836113bc5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b5061085f338484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061221d92505050565b60408051808201909152601b81527f5354414b494e475f424c4f434b4e554d4245525f544f4f5f4249470000000000602082015260009067ffffffffffffffff83111561148c5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b506108d060028363ffffffff61239116565b6114b884336114b3858563ffffffff61182816565b611ba3565b6108a6848483611fce565b6000806114cf83611b7f565b91506114da83611eb9565b9050915091565b6114ec833383611ba3565b61085f838383611fce565b60408051808201909152601b81527f5354414b494e475f424c4f434b4e554d4245525f544f4f5f4249470000000000602082015260009067ffffffffffffffff8311156115855760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b506001600160a01b03831660009081526001602052604090206115b1906002018363ffffffff61239116565b90505b92915050565b6000546001600160a01b031681565b60408051808201909152601381527f5354414b494e475f414d4f554e545f5a45524f000000000000000000000000006020820152826116495760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b5060006116588484600161239d565b90506116658360016124a8565b600054611683906001600160a01b031686308663ffffffff61250016565b6040518060400160405280601a81526020017f5354414b494e475f544f4b454e5f4445504f5349545f4641494c000000000000815250906117055760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b50836001600160a01b03167fc65e53b88159e7d2c0fc12a0600072e28ae53ff73b4c1715369c30f1609351428483856040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561177d578181015183820152602001611765565b50505050905090810190601f1680156117aa5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a25050505050565b805460009080156117fc578260000160018203815481106117dd57fe5b60009182526020909120015467ffffffffffffffff1691506108d39050565b50600092915050565b60006108d061181383611eb9565b61181c84611b7f565b9063ffffffff611af016565b60408051808201909152601181527f4d4154485f4144445f4f564552464c4f57000000000000000000000000000000602082015260009083830190848210156118b25760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b509392505050565b6001600160a01b0380841660009081526001602081815260408084209487168452938152838320918201548451808601909552601b85527f5354414b494e475f4c4f434b5f444f45535f4e4f545f4558495354000000000091850191909152919290916119685760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b50805460408051808201909152601781527f5354414b494e475f4e4f545f454e4f5547485f4c4f434b0000000000000000006020820152908411156119ee5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b50600083156119fd5783611a00565b81545b9050846001600160a01b0316876001600160a01b03161415611a2757600192505050611113565b856001600160a01b0316876001600160a01b031614611a4b57600092505050611113565b80611a5b57600192505050611113565b846001600160a01b03166332c6534b87836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b031681526020018281526020019250505060206040518083038186803b158015611ab957600080fd5b505afa158015611acd573d6000803e3d6000fd5b505050506040513d6020811015611ae357600080fd5b5051979650505050505050565b6000828211156040518060400160405280601281526020017f4d4154485f5355425f554e444552464c4f57000000000000000000000000000081525090611b785760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b5050900390565b6001600160a01b03811660009081526001602052604081206108d090600201612594565b6001600160a01b03808416600090815260016020908152604080832093861683528382529182902080548351808501909452601784527f5354414b494e475f4e4f545f454e4f5547485f4c4f434b000000000000000000928401929092529184821015611c515760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b508381038083556001840154611c6d908663ffffffff611af016565b60018501556040805182815290516001600160a01b0380891692908a16917fe5fa7959d07a49023f056773acdae23061f2ed83666b174c4d3ad25c84bd395a9181900360200190a350505050505050565b60408051808201909152601381527f5354414b494e475f414d4f554e545f5a45524f00000000000000000000000000602082015281611d3e5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b506000611d4d8483600061239d565b9050611d5a8260006124a8565b6040805160008082526020820180845285815292820184905260608083019081528251608084018190526001600160a01b038916947faf01bfc8475df280aca00b578c4a948e6d95700f0db8c13365240f7f973c87549488948894919360a08501918491908190849084905b83811015611dde578181015183820152602001611dc6565b50505050905090810190601f168015611e0b5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a2600054611e37906001600160a01b0316848463ffffffff6125ec16565b6040518060400160405280601b81526020017f5354414b494e475f544f4b454e5f5452414e534645525f4641494c0000000000815250906112da5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b6001600160a01b03166000908152600160208190526040909120015490565b60408051808201909152601381527f5354414b494e475f414d4f554e545f5a45524f00000000000000000000000000602082015281611f585760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b506001820154600090611f71908363ffffffff61182816565b600184018190556040805182815290519192506001600160a01b0386169133917f34ef02a331da5344779c32380b51356398a989bef946d9dd8839938900f9ebce919081900360200190a350505050565b60006111e06002612594565b60408051808201909152601381527f5354414b494e475f414d4f554e545f5a45524f0000000000000000000000000060208201528161204e5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b5061205b8382600061239d565b506120688282600161239d565b50816001600160a01b0316836001600160a01b03167f1e07278daf12d879e91ea076cf43032a70d56cb1d6e8bc91534dcd17f61e18f3836040518082815260200191505060405180910390a3505050565b3360009081526001602081815260408084206001600160a01b0388168552825292839020918201548351808501909452601b84527f5354414b494e475f4c4f434b5f414c52454144595f455849535453000000000091840191909152909190156121645760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b50836001600160a01b0316336001600160a01b03167f9bc888ab5ee77cb1d3110ed41a6f406608a152b75aa4f0ea5a894e3eafbcff38846040518080602001828103825283818151815260200191508051906020019080838360005b838110156121d85781810151838201526020016121c0565b50505050905090810190601f1680156122055780820380516001836020036101000a031916815260200191505b509250505060405180910390a36108a6848285611ed8565b600061222b8484600061239d565b90506122388360006124a8565b600054612255906001600160a01b0316858563ffffffff6125ec16565b6040518060400160405280601b81526020017f5354414b494e475f544f4b454e5f5452414e534645525f4641494c0000000000815250906122d75760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b50836001600160a01b03167faf01bfc8475df280aca00b578c4a948e6d95700f0db8c13365240f7f973c87548483856040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561234f578181015183820152602001612337565b50505050905090810190601f16801561237c5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a250505050565b60006115b1838361266e565b6000806123a985611b7f565b9050600083156123ca576123c3828663ffffffff61182816565b905061246c565b6123d386611805565b8511156040518060400160405280601a81526020017f5354414b494e475f4e4f545f454e4f5547485f42414c414e4345000000000000815250906124585760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b50612469828663ffffffff611af016565b90505b61249f61247761287d565b6001600160a01b0388166000908152600160205260409020600201908363ffffffff61288f16565b95945050505050565b60006124b2611fc2565b9050600082156124d3576124cc828563ffffffff61182816565b90506124e6565b6124e3828563ffffffff611af016565b90505b6108a66124f161287d565b6002908363ffffffff61288f16565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905260009061258a8682612936565b9695505050505050565b805460009080156117fc578260000160018203815481106125b157fe5b60009182526020909120015468010000000000000000900477ffffffffffffffffffffffffffffffffffffffffffffffff1691506108d39050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905260009061249f8582612936565b8154600090806126825760009150506115b4565b83547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8201906000908690839081106126b757fe5b6000918252602090912001805490915067ffffffffffffffff9081169086161061270c575468010000000000000000900477ffffffffffffffffffffffffffffffffffffffffffffffff1692506115b4915050565b826001148061274357508560000160008154811061272657fe5b60009182526020909120015467ffffffffffffffff908116908616105b1561275457600093505050506115b4565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83015b81811115612830578754600283830160010104906000908a908390811061279d57fe5b6000918252602090912001805490915067ffffffffffffffff908116908a168110156127cb57829450612828565b8067ffffffffffffffff168a67ffffffffffffffff1610156127f257600183039350612828565b505468010000000000000000900477ffffffffffffffffffffffffffffffffffffffffffffffff1696506115b495505050505050565b50505061277a565b87600001828154811061283f57fe5b60009182526020909120015468010000000000000000900477ffffffffffffffffffffffffffffffffffffffffffffffff1698975050505050505050565b60006111e061288a612981565b612985565b60408051808201909152601881527f434845434b504f494e545f56414c55455f544f4f5f4249470000000000000000602082015277ffffffffffffffffffffffffffffffffffffffffffffffff82111561292a5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b5061085f838383612a1a565b6000806040516020818551602087016000895af18015612977573d8015612964576020811461296d57612975565b60019350612975565b600183511493505b505b5090949350505050565b4390565b60408051808201909152601581527f55494e5436345f4e554d4245525f544f4f5f4249470000000000000000000000602082015260009067ffffffffffffffff831115612a135760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561095a578181015183820152602001610942565b5090919050565b825480612aba576040805180820190915267ffffffffffffffff808516825277ffffffffffffffffffffffffffffffffffffffffffffffff80851660208085019182528854600181018a5560008a815291909120945194018054915190921668010000000000000000029383167fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000909116179091169190911790556108a6565b6000846000016001830381548110612ace57fe5b6000918252602090912001805490915067ffffffffffffffff908116908516811015612b8d576040805180820190915267ffffffffffffffff808716825277ffffffffffffffffffffffffffffffffffffffffffffffff80871660208085019182528a54600181018c5560008c815291909120945194018054915190921668010000000000000000029383167fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090911617909116919091179055612c51565b808567ffffffffffffffff161415612bd957815467ffffffffffffffff166801000000000000000077ffffffffffffffffffffffffffffffffffffffffffffffff861602178255612c51565b60408051808201825260208082527f434845434b504f494e545f43414e4e4f545f4144445f504153545f56414c5545818301908152925162461bcd60e51b815260048101918252825160248201528251929391928392604490920191908083836000831561095a578181015183820152602001610942565b50505050505056fea265627a7a72315820f4d519b504e52b72909f1f98e9e6af61aed5bc0eb319f8aa4772bb3591ad040964736f6c63430005110032a265627a7a723158206899830705ed8e633fefd509caa0f41c60b445ddb153b26ace8c2c86daf80d4464736f6c63430005110032",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1373,
        "contract": "contracts/StakingFactory.sol:StakingFactory",
        "label": "instances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}